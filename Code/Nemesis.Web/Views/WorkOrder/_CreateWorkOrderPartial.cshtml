@model Nemesis.Web.Models.WorkOrderViewModel
@{
    Layout = null;
}

<br />

@using (Html.BeginForm("CreateWorkOrder", "WorkOrder", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal", role = "form", @id="wo-form" }))
{

    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <fieldset>
        <div class="form-group">
            @Html.LabelFor(x => x.Code, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(x => x.Code, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Code)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(x => x.Name, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Name)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(x => x.Description, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextAreaFor(x => x.Description, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Description)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(x => x.StartDate, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(x => x.StartDate, "{0:dd.MM.yyyy}", new { @class = "form-control datepicker" })
                @Html.ValidationMessageFor(x => x.StartDate)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(x => x.EstimatedEndDate, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(x => x.EstimatedEndDate, "{0:dd.MM.yyyy}", new { @class = "form-control datepicker" })
                @Html.ValidationMessageFor(x => x.EstimatedEndDate)
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Internal", new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.CheckBox("Internal", new { @class = "checkbox" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(x => x.ClientId, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(x => x.ClientId, Model.Clients, new { @class = "form-control", id = "client" })
                @Html.ValidationMessageFor(x => x.ClientId)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(x => x.Document, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(x => x.Document, new { @type = "file", @id = "workorder-file", @accept = "application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"})
                @Html.ValidationMessageFor(x => x.Document)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(x => x.Teams, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(x => x.IdTeams, Model.Teams, new { @class = "form-control", multiple = "multiple" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </fieldset>
}

<script type="text/javascript">
    $(function () { // will trigger when the document is ready
        $('.datepicker').datepicker({ dateFormat: "dd.mm.yy." }); //Initialise any date pickers
    });

    $(document).ready(function () {
        $('input[type="checkbox"]').click(function () {
            if ($(this).prop("checked") == true) {
                var elem = document.getElementById("client");
                elem.disabled = true;
            }
            else if ($(this).prop("checked") == false) {
                var elem = document.getElementById("client");
                elem.disabled = false;
            }
        });
    });

    
    //this code will be executed when a new file is selected
    $('#workorder-file').bind('change', function () {

        //converts the file size from bytes to MB
        var fileSize = this.files[0].size / 1024 / 1024;

        //checks whether the file is less than 20 MB
        if (fileSize <= 20) {
        }
        else {
            alert("File is too large.");
            document.getElementById('workorder-file').value = "";
        }
    });
</script>


